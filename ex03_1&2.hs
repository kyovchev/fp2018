{-
  Зад. 1. Напишете оператор n ## k, който приема n > 0 и k >= 0 и връща сумата
  от всяка цифра на n повдигната на степен k.

  Примери:
    12 ## 2 = 1 ^ 2 + 2 ^ 2 = 1 + 4   = 5
    17 ## 3 = 1 ^ 3 + 7 ^ 3 = 1 + 343 = 344
-}
(##) :: Int -> Int -> Int
n ## k = undefined


{-
  Зад. 2. Да се дефинира функцията isNarcissistic n, която приема като аргумент
  цялото положително число n и връща дали то е нарцистично. Нарцистични се наричат
  числата, които са равни на сбора на цифрите си (в десетична бройна система),
  всяка повдигната на степен броя на цифрите на числото.

  Пример за такова число е 153,
  тъй като 1 ^ 3 + 5 ^ 3 + 3 ^ 3 = 1 + 125 + 27 = 153.
-}

countDigits :: Int -> Int
countDigits n = undefined


{-
  Зад. 3. Да се дефинира предикат isAutomorphic, който приема число n и
  проверява дали n^2 завършва с цифрите на n.
-}
isAutomorphic :: Int -> Bool
isAutomorphic n = undefined


{-
  Зад. 4. По зададени x и n, да се изчисли сумата: 1 + x + x^2 + x^3 + ... + x^n.
-}
calcSum :: Double -> Int -> Double
calcSum x n = undefined


{-
  Зад. 5. Да се реши задача 4, чрез използване на не повече от n умножения.
-}
calcSumFast :: Double -> Int -> Double
calcSumFast x n = undefined


{-
  Зад. 6. Да се напише функция, която връща като списък целите числа в 
  зададен интервал [a, b].
-}
getInterval :: Int -> Int -> [Int]
getInterval a b = undefined


{-
  Зад. 7. Напишете фукнция, която намира сумата на елементите на списък от числа.
-}
sumElems :: [Int] -> Int
sumElems xs = undefined


{-
  Зад. 8. Напишете фунция, която намира броя на елементите на списък.
-}
countElems :: [t] -> Int
countElems xs = undefined


{-
  Зад. 9. Напишете предикат, който проверява дали даден елемент се среща в списък.
-}
memberOf :: Int -> [Int] -> Bool
memberOf x xs = undefined


{-
  Зад. 10. Напишете функция, която премахва първото срещане на x в списъка xs.
-}
removeFirst :: Int -> [Int] -> [Int]
removeFirst x xs = undefined

